//Copyright (c) 2022 user1687569

//1
if语句让程序决定是否执行特定的语句或语句块，
而if else语句则让程序决定执行两条语句或语句块中的
哪一条，这种语句对于选择其中一种操作很有用。

第二种格式在逻辑判断上更清晰明了
============
============
这两个版本将给出相同的答案，但if else版本的效率更高。
例如，考虑当ch为空格时的情况。版本1对空格加1，然后看它是否
为换行符。这将浪费时间，因为程序已经知道ch为空格，因此它不是换行符。
在这种情况下，版本2将不会查看字符是否为换行符。


//2
输出的将是原先字符串中字符的十进制ASCII码再加一
=========
=========
//2
++ch和ch + 1得到的数值相同。但++ch的类型为char,
将作为字符打印，而ch+1是int类型（因为将char和int相加），
将作为数字打印。


//3
Output: 
H$i$!$
S$e$n$d$ $ct1 = 9, ct2 = 9


//4 
a. weight >= 115 && weight < 125
b. ch == 'q' || ch == 'Q'
c. (x % 2 == 0) && (x != 26)
d. (x % 2 == 0) && (x % 26 != 0)
e. (donation >= 1000 && donation <= 2000) || (guest == 1)
f. (ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z')


//5
在C++中，!!x与x不一定相同。
例如，如果x为10，则!x为0，!!x为1。
然而，如果x为bool变量，则!!x为x。


//6
x = (x >= 0) ? x : -x;


//7
switch(ch)
{
    case 'A':
        a_grade++;
        break;
    case 'B':
        b_grade++;
        break;
    case 'C':
        c_grade++;
        break;
    case 'D':
        d_grade++;
        break;
    default:
        f_grade++;
        break;
}


//8 
与使用数字相比，使用字符（如a和c）表示菜单选项和case标签有何优点？
（提示：想想用户输入q和输入5的情况）
答：使用字符更能够让程序使用者清楚菜单的选项内容，使用起来更流畅
==============
==============
//8 正解
如果使用整数标签，且用户输入了非整数（如q）,则程序将因为整数输入
不能处理字符而挂起。但是，如果使用字符标签，而用户输入了整数（如5），
则字符输入将5作为字符处理。然后，switch语句的default部分将提示
输入另一个字符。



//9
int line = 0;
char ch;
cin.get(ch);
while(ch != '\Q')
{
    if(ch == '\n')
        line++;
    cin.get(ch);
}
==========
//9
int line = 0;
char ch;
while(cin.get(ch) && ch != 'Q')
{
    if(ch == '\n')
        line++;
}






